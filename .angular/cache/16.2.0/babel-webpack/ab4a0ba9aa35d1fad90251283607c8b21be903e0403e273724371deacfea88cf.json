{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nfunction isAngularInTestMode() {\n  // This is safe to check for these properties in the following way since `typeof` does not\n  // throw an exception if the value does not exist in the scope.\n  // We should not try to read these values from the global scope (e.g. `ɵglobal` from the `@angular/core`).\n  // This is related to how these frameworks compile and execute modules. E.g. Jest wraps the module into\n  // its internal code where `jest` variable exists in the scope. It cannot be read from the global scope, e.g.\n  // this will return undefined `global.jest`, but `jest` will not equal undefined.\n  return typeof __karma__ !== 'undefined' || typeof jasmine !== 'undefined' || typeof jest !== 'undefined' || typeof Mocha !== 'undefined';\n}\nclass NgxsBootstrapper {\n  constructor() {\n    /**\n     * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\n     */\n    this.bootstrap$ = new ReplaySubject(1);\n  }\n  get appBootstrapped$() {\n    return this.bootstrap$.asObservable();\n  }\n  /**\n   * This event will be emitted after attaching `ComponentRef` of the root component\n   * to the tree of views, that's a signal that application has been fully rendered\n   */\n  bootstrap() {\n    this.bootstrap$.next(true);\n    this.bootstrap$.complete();\n  }\n}\n/** @nocollapse */\nNgxsBootstrapper.ɵfac = function NgxsBootstrapper_Factory(t) {\n  return new (t || NgxsBootstrapper)();\n};\n/** @nocollapse */\nNgxsBootstrapper.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxsBootstrapper,\n  factory: NgxsBootstrapper.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxsBootstrapper, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nfunction defaultEqualityCheck(a, b) {\n  return a === b;\n}\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  const length = prev.length;\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Memoize a function on its last inputs only.\n * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\n *\n * @ignore\n */\nfunction memoize(func, equalityCheck = defaultEqualityCheck) {\n  let lastArgs = null;\n  let lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  function memoized() {\n    // eslint-disable-next-line prefer-rest-params\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      // eslint-disable-next-line prefer-rest-params, prefer-spread\n      lastResult = func.apply(null, arguments);\n    }\n    // eslint-disable-next-line prefer-rest-params\n    lastArgs = arguments;\n    return lastResult;\n  }\n  memoized.reset = function () {\n    // The hidden (for now) ability to reset the memoization\n    lastArgs = null;\n    lastResult = null;\n  };\n  return memoized;\n}\nclass InitialState {\n  static set(state) {\n    this._value = state;\n  }\n  static pop() {\n    const state = this._value;\n    this._value = {};\n    return state;\n  }\n}\nInitialState._value = {};\nconst INITIAL_STATE_TOKEN = new InjectionToken('INITIAL_STATE_TOKEN', {\n  providedIn: 'root',\n  factory: () => InitialState.pop()\n});\n\n// These tokens are internal and can change at any point.\nconst ɵNGXS_STATE_FACTORY = new InjectionToken('ɵNGXS_STATE_FACTORY');\nconst ɵNGXS_STATE_CONTEXT_FACTORY = new InjectionToken('ɵNGXS_STATE_CONTEXT_FACTORY');\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_STATE_TOKEN, InitialState, NgxsBootstrapper, isAngularInTestMode, memoize, ɵNGXS_STATE_CONTEXT_FACTORY, ɵNGXS_STATE_FACTORY };","map":{"version":3,"names":["i0","Injectable","InjectionToken","ReplaySubject","isAngularInTestMode","__karma__","jasmine","jest","Mocha","NgxsBootstrapper","constructor","bootstrap$","appBootstrapped$","asObservable","bootstrap","next","complete","ɵfac","NgxsBootstrapper_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","length","i","memoize","func","lastArgs","lastResult","memoized","arguments","apply","reset","InitialState","set","state","_value","pop","INITIAL_STATE_TOKEN","ɵNGXS_STATE_FACTORY","ɵNGXS_STATE_CONTEXT_FACTORY"],"sources":["/Users/chamalsha/Desktop/mobile-web-practice/node_modules/@ngxs/store/fesm2015/ngxs-store-internals.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\nfunction isAngularInTestMode() {\n    // This is safe to check for these properties in the following way since `typeof` does not\n    // throw an exception if the value does not exist in the scope.\n    // We should not try to read these values from the global scope (e.g. `ɵglobal` from the `@angular/core`).\n    // This is related to how these frameworks compile and execute modules. E.g. Jest wraps the module into\n    // its internal code where `jest` variable exists in the scope. It cannot be read from the global scope, e.g.\n    // this will return undefined `global.jest`, but `jest` will not equal undefined.\n    return (typeof __karma__ !== 'undefined' ||\n        typeof jasmine !== 'undefined' ||\n        typeof jest !== 'undefined' ||\n        typeof Mocha !== 'undefined');\n}\n\nclass NgxsBootstrapper {\n    constructor() {\n        /**\n         * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\n         */\n        this.bootstrap$ = new ReplaySubject(1);\n    }\n    get appBootstrapped$() {\n        return this.bootstrap$.asObservable();\n    }\n    /**\n     * This event will be emitted after attaching `ComponentRef` of the root component\n     * to the tree of views, that's a signal that application has been fully rendered\n     */\n    bootstrap() {\n        this.bootstrap$.next(true);\n        this.bootstrap$.complete();\n    }\n}\n/** @nocollapse */ NgxsBootstrapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxsBootstrapper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ NgxsBootstrapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxsBootstrapper, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: NgxsBootstrapper, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nfunction defaultEqualityCheck(a, b) {\n    return a === b;\n}\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n        return false;\n    }\n    // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n    const length = prev.length;\n    for (let i = 0; i < length; i++) {\n        if (!equalityCheck(prev[i], next[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Memoize a function on its last inputs only.\n * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\n *\n * @ignore\n */\nfunction memoize(func, equalityCheck = defaultEqualityCheck) {\n    let lastArgs = null;\n    let lastResult = null;\n    // we reference arguments instead of spreading them for performance reasons\n    function memoized() {\n        // eslint-disable-next-line prefer-rest-params\n        if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n            // apply arguments instead of spreading for performance.\n            // eslint-disable-next-line prefer-rest-params, prefer-spread\n            lastResult = func.apply(null, arguments);\n        }\n        // eslint-disable-next-line prefer-rest-params\n        lastArgs = arguments;\n        return lastResult;\n    }\n    memoized.reset = function () {\n        // The hidden (for now) ability to reset the memoization\n        lastArgs = null;\n        lastResult = null;\n    };\n    return memoized;\n}\n\nclass InitialState {\n    static set(state) {\n        this._value = state;\n    }\n    static pop() {\n        const state = this._value;\n        this._value = {};\n        return state;\n    }\n}\nInitialState._value = {};\nconst INITIAL_STATE_TOKEN = new InjectionToken('INITIAL_STATE_TOKEN', {\n    providedIn: 'root',\n    factory: () => InitialState.pop()\n});\n\n// These tokens are internal and can change at any point.\nconst ɵNGXS_STATE_FACTORY = new InjectionToken('ɵNGXS_STATE_FACTORY');\nconst ɵNGXS_STATE_CONTEXT_FACTORY = new InjectionToken('ɵNGXS_STATE_CONTEXT_FACTORY');\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_STATE_TOKEN, InitialState, NgxsBootstrapper, isAngularInTestMode, memoize, ɵNGXS_STATE_CONTEXT_FACTORY, ɵNGXS_STATE_FACTORY };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}